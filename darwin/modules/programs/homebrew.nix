# Inspired by: https://github.com/lccambiaghi/nixpkgs/blob/main/modules/homebrew.nix
{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.homebrew;

  brewfileSection = heading: type: entries:
    if entries != [] then
      "# ${heading}\n" + (concatMapStrings (name: "${type} \"${name}\"\n") entries) + "\n"
    else "";

  masBrewfileSection = entries:
    if entries != {} then
      "# Mac App Store apps\n" +
      concatStringsSep "\n" (mapAttrsToList (name: id: ''mas "${name}", id: ${toString id}'') entries) +
      "\n"
    else "";

  brewfile = pkgs.writeText "Brewfile" (
    (brewfileSection "Taps" "tap" cfg.taps) +
    (brewfileSection "Brews" "brew" cfg.brews) +
    (brewfileSection "Casks" "cask" cfg.casks) +
    (masBrewfileSection cfg.masApps) +
    (brewfileSection "Docker contrainers" "whalebrew" cfg.whalebrews)
  );

  brew-bunble-options =
    "--file='${brewfile}' --no-lock" +
    (if cfg.cleanupType == "uninstall" || cfg.cleanupType == "zap" then " --cleanup" else "") +
    (if cfg.cleanupType == "zap" then " --zap" else "");

in

{
  options.programs.homebrew = {
    enable = mkEnableOption "Enable managing installed Homebrew formulas with `nix-darwin`.";

    cleanupType = mkOption {
      type = with types; enum [ "none" "uninstall" "zap" ];
      default = "uninstall";
      example = "none";
      description = ''
        When set to "uninstall" (the default), `nix-darwin` invokes `brew bundle` with the `--cleanup` flag to
        uninstall all dependencies not listed in generate Brewfile.

        When set to "zap", `nix-darwin` invokes `brew bundle` with the `--cleanup --zap` flags which
        has the effect of `brew` using the `--zap` flag rather than the `--uninstall` flag when
        uninstalling dependencies not listed in the generated Brewfile.

        When set to "none", installed formulas not listed in the generage Brewfile remain installed.

        If you plan on using `nix-darwin` exclusively to manage formulas installed by `brew`, you
        probably want leave this option set to the default, or change it to "zap".
      '';
    };

    setNolockEnvvar = mkOption {
      type = types.bool;
      default = true;
      description = ''
        Sets the HOMEBREW_BUNDLE_NO_LOCK enviroment variable in the user's shell so that lock files
        aren't generated when the user runs `brew bundle` command.
      '';
    };

    setBrewfileEnvvar = mkOption {
      type = types.bool;
      default = true;
      description = ''
        Sets the HOMEBREW_BUNDLE_FILE enviroment variable to the path of Brewfile generated by this
        module in the Nix store.

        This is handy for allowing the user to easily update or cleanup their `brew` formulas
        managed by `nix-darwin` without needing to run a full enviroment rebuild.
      '';
    };

    taps = mkOption {
      type = with types; listOf str;
      default = [];
      example = [ "homebrew/cask-fonts" ];
      description = "Homebrew formula repositories to tap";
    };

    brews = mkOption {
      type = with types; listOf str;
      default = [];
      example = [ "mas" ];
      description = "Homebrew formulea to install";
    };

    casks = mkOption {
      type = with types; listOf str;
      default = [];
      example = [ "hammerspoon" "virtualbox" ];
      description = "Homebrew casks to install";
    };

    masApps = mkOption {
      type = with types; attrsOf int;
      default = {};
      example = {
        "1Password" = 1107421413;
        Xcode = 497799835;
      };
      description = "Applications to install from Mac App Store using `mas`";
    };

    whalebrews = mkOption {
      type = with types; listOf str;
      default = [];
      example = [ "whalebrew/wget" ];
      description = "Docker images to install";
    };
  };

  config = mkIf cfg.enable {
    programs.homebrew.brews =
      optional (cfg.masApps != {}) "mas" ++
      optional (cfg.whalebrews != []) "whalebrew";

    environment.variables =
      (if cfg.setNolockEnvvar then { HOMEBREW_BUNDLE_NO_LOCK = "1"; } else {}) //
      (if cfg.setBrewfileEnvvar then { HOMEBREW_BUNDLE_FILE = "${brewfile}"; } else {});

    system.activationScripts.extraUserActivation.text = ''
      # Homebrew
      echo >&2 "brew bundle..."
      PATH=/usr/local/bin:$PATH brew update > /dev/null
      PATH=/usr/local/bin:$PATH brew bundle ${brew-bunble-options}
    '';
  };

}
